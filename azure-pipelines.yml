# ASP.NET
# Build and test ASP.NET projects.
# Add steps that publish symbols, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/apps/aspnet/build-aspnet-4
trigger:
  branches:
    include:
      - '*'


variables:
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'
  dynamoDbImage: 'amazon/dynamodb-local'

pool:
  vmImage: 'ubuntu-latest'

steps:
- task: NuGetToolInstaller@1

- task: NuGetCommand@2
  inputs:
    restoreSolution: '$(solution)'

- task: UseDotNet@2
  displayName: 'Install .NET 7.0 SDK'
  inputs:
    packageType: 'sdk'
    version: '7.0.x'

- task: DotNetCoreCLI@2
  inputs:
    command: 'restore'
    projects: |
      **/Azure1.csproj
      **/Azure2.csproj
      **/UITest.csproj
  displayName: Restore PRSQRL_Nest Nuget Packages

- task: DotNetCoreCLI@2
  displayName: 'Build Projects'
  inputs:
    command: 'build'
    projects: |
      **/Azure1.csproj
      **/Azure2.csproj
      **/UITest.csproj
    arguments: '--configuration $(BuildConfiguration)'
    
- task: DockerInstaller@0
  inputs:
    dockerVersion: '17.09.0-ce'

- task: Docker@2
  displayName: Login to Docker
  inputs:
    command: login
    containerRegistry: 'DockerRegistry'

- task: CmdLine@2
  displayName: Run Docker Containers
  inputs:
    script: |
      docker run --name mycontainer -d -p 8000:8000 $(dynamoDbImage)
      docker run --name mssql -e "ACCEPT_EULA=Y" -e "MSSQL_SA_PASSWORD=Pwd12345!" -p 5433:1433 -d mcr.microsoft.com/mssql/server:2019-latest

- task: DotNetCoreCLI@2
  displayName: 'Publish Azure1'
  inputs:
    command: 'publish'
    publishWebProjects: false
    zipAfterPublish: false
    projects: '**/Azure1.csproj'
    arguments: -c $(BuildConfiguration) -o releaseAzure1

- task: DotNetCoreCLI@2
  displayName: 'Publish Azure2'
  inputs:
    command: 'publish'
    publishWebProjects: false
    zipAfterPublish: false
    projects: '**/Azure2.csproj'
    arguments: -c $(BuildConfiguration) -o releaseAzure2
    
# - task: PowerShell@2
#   displayName: Run Azure1
#   inputs:
#     targetType: 'inline'
#     script: |
#       Start-Process -FilePath "Azure1.exe" -WorkingDirectory "release\Azure1" -ArgumentList "--urls=https://localhost:7005"
    
# - task: PowerShell@2
#   displayName: Rune Azure2
#   inputs:
#     targetType: 'inline'
#     script: |
#       Start-Process -FilePath "Azure2.exe" -WorkingDirectory "release\Azure2" -ArgumentList "--urls=https://localhost:7225"
 
- task: CmdLine@2
  displayName: Run Web App 1
  inputs:
    script: |
      ./releaseAzure1/Azure1/Azure1 --environment=Staging --urls=https://localhost:7005 &
      
- task: CmdLine@2
  displayName: Run Web App 2
  inputs:
    script: |
      ./releaseAzure2/Azure2/Azure2 --environment=Staging --urls=https://localhost:7225 &

- task: DotNetCoreCLI@2
  displayName: 'Run Automated Unit Tests' 
  inputs:
    command: 'test'
    projects: '**/UITest.csproj'
    arguments: '--no-restore'